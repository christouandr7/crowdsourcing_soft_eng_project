/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
/**
 * @record
 */
export function IBounceInLeftAnimationOptions() { }
if (false) {
    /**
     * Translate, possible units: px, %, em, rem, vw, vh
     *
     * Default: 3000px
     * @type {?|undefined}
     */
    IBounceInLeftAnimationOptions.prototype.translate;
}
/** @type {?} */
var bounceInLeft = animation(group([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ transform: 'translate3d(-{{translate}}, 0, 0)', easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0 }),
        style({ transform: 'translate3d(25px, 0, 0)', easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0.6 }),
        style({ transform: 'translate3d(-10px, 0, 0)', easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0.75 }),
        style({ transform: 'translate3d(5px, 0, 0)', easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0.9 }),
        style({ transform: 'translate3d(0, 0, 0)', easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 1 })
    ])),
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ visibility: 'visible', opacity: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0 }),
        style({ opacity: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 0.6 }),
        style({ opacity: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', offset: 1 })
    ]))
]));
/** @type {?} */
var DEFAULT_DURATION = 1000;
/**
 * @param {?=} options
 * @return {?}
 */
export function bounceInLeftAnimation(options) {
    return trigger((options && options.anchor) || 'bounceInLeft', [
        transition('0 => 1', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            group(tslib_1.__spread([
                useAnimation(bounceInLeft)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '3000px'
            }
        })
    ]);
}
/**
 * @param {?=} options
 * @return {?}
 */
export function bounceInLeftOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'bounceInLeftOnEnter', [
        transition(':enter', tslib_1.__spread([
            style({ visibility: 'hidden' })
        ], (options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            group(tslib_1.__spread([
                useAnimation(bounceInLeft)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '3000px'
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,