/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
/**
 * @record
 */
export function IRotateOutAnimationOptions() { }
if (false) {
    /**
     * Angle - number of degrees at which end animation.
     *
     * Default 200
     * @type {?|undefined}
     */
    IRotateOutAnimationOptions.prototype.degrees;
}
/** @type {?} */
var rotateOut = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ opacity: 1, easing: 'ease', offset: 0 }),
        style({ opacity: 0, transform: 'rotate({{degrees}}deg)', easing: 'ease', offset: 1 })
    ]))
]);
/** @type {?} */
var DEFAULT_DURATION = 1000;
/**
 * @param {?=} options
 * @return {?}
 */
export function rotateOutAnimation(options) {
    return trigger((options && options.anchor) || 'rotateOut', [
        transition('0 => 1', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'center' }),
            group(tslib_1.__spread([
                useAnimation(rotateOut)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 200
            }
        })
    ]);
}
/**
 * @param {?=} options
 * @return {?}
 */
export function rotateOutOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'rotateOutOnLeave', [
        transition(':leave', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'center' }),
            group(tslib_1.__spread([
                useAnimation(rotateOut)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 200
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLW91dC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFuaW1hdGlvbnMvIiwic291cmNlcyI6WyJyb3RhdGluZy1leGl0cy9yb3RhdGUtb3V0LmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsWUFBWSxFQUNaLFNBQVMsRUFFVCxLQUFLLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUk3QixnREFPQzs7Ozs7Ozs7SUFEQyw2Q0FBaUI7OztJQUdiLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDMUIsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2hELEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3RGLENBQUMsQ0FDSDtDQUNGLENBQUM7O0lBRUksZ0JBQWdCLEdBQUcsSUFBSTs7Ozs7QUFFN0IsTUFBTSw2QkFBNkIsT0FBb0M7SUFDckUsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsRUFBRTtRQUN6RCxVQUFVLENBQ1IsUUFBUSxtQkFFSCxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdHLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ3ZDLEtBQUs7Z0JBQ0gsWUFBWSxDQUFDLFNBQVMsQ0FBQztlQUNwQixDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFVBQVU7Z0JBQ2hGLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNQO1dBQ0MsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUU5RztZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUc7YUFDN0M7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQzs7Ozs7QUFFRCxNQUFNLG9DQUFvQyxPQUFvQztJQUM1RSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksa0JBQWtCLEVBQUU7UUFDaEUsVUFBVSxDQUNSLFFBQVEsbUJBRUgsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM3RyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN2QyxLQUFLO2dCQUNILFlBQVksQ0FBQyxTQUFTLENBQUM7ZUFDcEIsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxVQUFVO2dCQUNoRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDUDtXQUNDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFOUc7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHO2FBQzdDO1NBQ0YsQ0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBhbmltYXRlQ2hpbGQsXG4gIGFuaW1hdGlvbixcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxuICBncm91cCxcbiAga2V5ZnJhbWVzLFxuICBxdWVyeSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIHVzZUFuaW1hdGlvblxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgSUFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvdGF0ZU91dEFuaW1hdGlvbk9wdGlvbnMgZXh0ZW5kcyBJQW5pbWF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbmdsZSAtIG51bWJlciBvZiBkZWdyZWVzIGF0IHdoaWNoIGVuZCBhbmltYXRpb24uXG4gICAqXG4gICAqIERlZmF1bHQgMjAwXG4gICAqL1xuICBkZWdyZWVzPzogbnVtYmVyO1xufVxuXG5jb25zdCByb3RhdGVPdXQgPSBhbmltYXRpb24oW1xuICBhbmltYXRlKFxuICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAga2V5ZnJhbWVzKFtcbiAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMCB9KSxcbiAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAncm90YXRlKHt7ZGVncmVlc319ZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDEgfSlcbiAgICBdKVxuICApXG5dKTtcblxuY29uc3QgREVGQVVMVF9EVVJBVElPTiA9IDEwMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVPdXRBbmltYXRpb24ob3B0aW9ucz86IElSb3RhdGVPdXRBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdyb3RhdGVPdXQnLCBbXG4gICAgdHJhbnNpdGlvbihcbiAgICAgICcwID0+IDEnLFxuICAgICAgW1xuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2JlZm9yZScgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pLFxuICAgICAgICBzdHlsZSh7ICd0cmFuc2Zvcm0tb3JpZ2luJzogJ2NlbnRlcicgfSksXG4gICAgICAgIGdyb3VwKFtcbiAgICAgICAgICB1c2VBbmltYXRpb24ocm90YXRlT3V0KSxcbiAgICAgICAgICAuLi4oIW9wdGlvbnMgfHwgIW9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuIHx8IG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAndG9nZXRoZXInXG4gICAgICAgICAgICA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV1cbiAgICAgICAgICAgIDogW10pXG4gICAgICAgIF0pLFxuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2FmdGVyJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSlcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OLFxuICAgICAgICAgIGRlZ3JlZXM6IChvcHRpb25zICYmIG9wdGlvbnMuZGVncmVlcykgfHwgMjAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlT3V0T25MZWF2ZUFuaW1hdGlvbihvcHRpb25zPzogSVJvdGF0ZU91dEFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ3JvdGF0ZU91dE9uTGVhdmUnLCBbXG4gICAgdHJhbnNpdGlvbihcbiAgICAgICc6bGVhdmUnLFxuICAgICAgW1xuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2JlZm9yZScgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pLFxuICAgICAgICBzdHlsZSh7ICd0cmFuc2Zvcm0tb3JpZ2luJzogJ2NlbnRlcicgfSksXG4gICAgICAgIGdyb3VwKFtcbiAgICAgICAgICB1c2VBbmltYXRpb24ocm90YXRlT3V0KSxcbiAgICAgICAgICAuLi4oIW9wdGlvbnMgfHwgIW9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuIHx8IG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAndG9nZXRoZXInXG4gICAgICAgICAgICA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV1cbiAgICAgICAgICAgIDogW10pXG4gICAgICAgIF0pLFxuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2FmdGVyJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSlcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OLFxuICAgICAgICAgIGRlZ3JlZXM6IChvcHRpb25zICYmIG9wdGlvbnMuZGVncmVlcykgfHwgMjAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIF0pO1xufVxuIl19